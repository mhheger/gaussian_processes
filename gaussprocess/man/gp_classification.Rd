% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classification_laplace.R
\name{gp_classification}
\alias{gp_classification}
\title{# Generating a new 'gp_classification' object}
\description{
# Generating a new 'gp_classification' object

# Generating a new 'gp_classification' object
}
\examples{

## ------------------------------------------------
## Method `gp_classification$new`
## ------------------------------------------------

mcgp <- gp_classification$new(n = 2)

#Adding data to 'gp_classification'-object


## ------------------------------------------------
## Method `gp_classification$add_data`
## ------------------------------------------------

mcgp <- gp_classification$new(n = 2)
y <- c(
  c(0,1),       #first point belongs to the first class, second point doesn't
  c(1,0)        #second point belongs to the first class, first point doesn't
)

X_learn <- list(
  c(1,2,3),
  c(-1,-2,-3)
)

mcgp$add_data(X_learn, y)

#Getting list of covariance matrices


## ------------------------------------------------
## Method `gp_classification$get_K_list`
## ------------------------------------------------

mcgp <- gp_classification$new(n = 2)
y <- c(
  c(0,1),       #first point belongs to the first class, second point doesn't
  c(1,0)        #second point belongs to the first class, first point doesn't
)

X_learn <- list(
  c(1,2,3),
  c(-1,-2,-3)
)

mcgp$add_data(X_learn, y)
mcgp$get_K_list()
#Getting list of learning input data


## ------------------------------------------------
## Method `gp_classification$get_X`
## ------------------------------------------------

mcgp <- gp_classification$new(n = 2)
y <- c(
  c(0,1),       #first point belongs to the first class, second point doesn't
  c(1,0)        #second point belongs to the first class, first point doesn't
)

X_learn <- list(
  c(1,2,3),
  c(-1,-2,-3)
)

mcgp$add_data(X_learn, y)
mcgp$get_X()

#Getting list of learning input labels


## ------------------------------------------------
## Method `gp_classification$get_y`
## ------------------------------------------------

mcgp <- gp_classification$new(n = 2)
y <- c(
  c(0,1),       #first point belongs to the first class, second point doesn't
  c(1,0)        #second point belongs to the first class, first point doesn't
)

X_learn <- list(
  c(1,2,3),
  c(-1,-2,-3)
)

mcgp$add_data(X_learn, y)
mcgp$get_y()
#Getting list of used covariance functions


## ------------------------------------------------
## Method `gp_classification$get_covariances`
## ------------------------------------------------

mcgp <- gp_classification$new(n = 2)
y <- c(
  c(0,1),       #first point belongs to the first class, second point doesn't
  c(1,0)        #second point belongs to the first class, first point doesn't
)

X_learn <- list(
  c(1,2,3),
  c(-1,-2,-3)
)

mcgp$add_data(X_learn, y)
mcgp$get_covariances()
#Getting class label probabilities


## ------------------------------------------------
## Method `gp_classification$get_prediction`
## ------------------------------------------------

mcgp <- gp_classification$new(n = 2)
y <- c(
  c(0,1),       #first point belongs to the first class, second point doesn't
  c(1,0)        #second point belongs to the first class, first point doesn't
)

X_learn <- list(
  c(1,2,3),
  c(-1,-2,-3)
)

mcgp$add_data(X_learn, y)
mcgp$get_prediction(c(1,2,4))

#Setting parameters


## ------------------------------------------------
## Method `gp_classification$set_parameters`
## ------------------------------------------------

mcgp <- gp_classification$new(n = 2)
y <- c(
  c(0,1),       #first point belongs to the first class, second point doesn't
  c(1,0)        #second point belongs to the first class, first point doesn't
)

X_learn <- list(
  c(1,2,3),
  c(-1,-2,-3)
)

mcgp$add_data(X_learn, y)
mcgp$set_parameters(1, "linear", list(sigma = c(1,1,1)))
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-gp_classification-new}{\code{gp_classification$new()}}
\item \href{#method-gp_classification-add_data}{\code{gp_classification$add_data()}}
\item \href{#method-gp_classification-get_K_list}{\code{gp_classification$get_K_list()}}
\item \href{#method-gp_classification-get_X}{\code{gp_classification$get_X()}}
\item \href{#method-gp_classification-get_y}{\code{gp_classification$get_y()}}
\item \href{#method-gp_classification-get_covariances}{\code{gp_classification$get_covariances()}}
\item \href{#method-gp_classification-get_prediction}{\code{gp_classification$get_prediction()}}
\item \href{#method-gp_classification-set_parameters}{\code{gp_classification$set_parameters()}}
\item \href{#method-gp_classification-clone}{\code{gp_classification$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-gp_classification-new"></a>}}
\if{latex}{\out{\hypertarget{method-gp_classification-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{gp_classification$new(n, covs = rep("squared_exp", n))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{number of classes, that are used}

\item{\code{covs}}{of length n, with names of the covariance functions, that
should be used. Per default squared_exp}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a new 'gp_classification' object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{mcgp <- gp_classification$new(n = 2)

#Adding data to 'gp_classification'-object

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-gp_classification-add_data"></a>}}
\if{latex}{\out{\hypertarget{method-gp_classification-add_data}{}}}
\subsection{Method \code{add_data()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{gp_classification$add_data(X_learn, y)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{X_learn}}{a list of points, a matrix or a data.frame of the points with
known input data}

\item{\code{y}}{vector of class labels (more details in details)}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Assuming n points, for which the right labeling is known, and C possible
classes, than this vector is build up like this:

- for each class, we consider the vector y_c, which has length n and whose
entries are defined as 1, if point i belongs to class c, or 0 otherwise.

- y is created by joining all y_c - vectors.
}

\subsection{Returns}{
modified 'gp_classification'-object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{mcgp <- gp_classification$new(n = 2)
y <- c(
  c(0,1),       #first point belongs to the first class, second point doesn't
  c(1,0)        #second point belongs to the first class, first point doesn't
)

X_learn <- list(
  c(1,2,3),
  c(-1,-2,-3)
)

mcgp$add_data(X_learn, y)

#Getting list of covariance matrices

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-gp_classification-get_K_list"></a>}}
\if{latex}{\out{\hypertarget{method-gp_classification-get_K_list}{}}}
\subsection{Method \code{get_K_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{gp_classification$get_K_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
list of covariance matrices, each class has it's own label
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{mcgp <- gp_classification$new(n = 2)
y <- c(
  c(0,1),       #first point belongs to the first class, second point doesn't
  c(1,0)        #second point belongs to the first class, first point doesn't
)

X_learn <- list(
  c(1,2,3),
  c(-1,-2,-3)
)

mcgp$add_data(X_learn, y)
mcgp$get_K_list()
#Getting list of learning input data

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-gp_classification-get_X"></a>}}
\if{latex}{\out{\hypertarget{method-gp_classification-get_X}{}}}
\subsection{Method \code{get_X()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{gp_classification$get_X()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
list of learning input data
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{mcgp <- gp_classification$new(n = 2)
y <- c(
  c(0,1),       #first point belongs to the first class, second point doesn't
  c(1,0)        #second point belongs to the first class, first point doesn't
)

X_learn <- list(
  c(1,2,3),
  c(-1,-2,-3)
)

mcgp$add_data(X_learn, y)
mcgp$get_X()

#Getting list of learning input labels

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-gp_classification-get_y"></a>}}
\if{latex}{\out{\hypertarget{method-gp_classification-get_y}{}}}
\subsection{Method \code{get_y()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{gp_classification$get_y()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
list of learning input labels
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{mcgp <- gp_classification$new(n = 2)
y <- c(
  c(0,1),       #first point belongs to the first class, second point doesn't
  c(1,0)        #second point belongs to the first class, first point doesn't
)

X_learn <- list(
  c(1,2,3),
  c(-1,-2,-3)
)

mcgp$add_data(X_learn, y)
mcgp$get_y()
#Getting list of used covariance functions

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-gp_classification-get_covariances"></a>}}
\if{latex}{\out{\hypertarget{method-gp_classification-get_covariances}{}}}
\subsection{Method \code{get_covariances()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{gp_classification$get_covariances()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
list of used covariance functions
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{mcgp <- gp_classification$new(n = 2)
y <- c(
  c(0,1),       #first point belongs to the first class, second point doesn't
  c(1,0)        #second point belongs to the first class, first point doesn't
)

X_learn <- list(
  c(1,2,3),
  c(-1,-2,-3)
)

mcgp$add_data(X_learn, y)
mcgp$get_covariances()
#Getting class label probabilities

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-gp_classification-get_prediction"></a>}}
\if{latex}{\out{\hypertarget{method-gp_classification-get_prediction}{}}}
\subsection{Method \code{get_prediction()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{gp_classification$get_prediction(x_input, n_samples = 1000)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x_input}}{numeric vector of input data, where you want to get the prediction}

\item{\code{n_samples}}{number of samples to get probabilities using monte-carlo method}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
vector of probabiilties for each label
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{mcgp <- gp_classification$new(n = 2)
y <- c(
  c(0,1),       #first point belongs to the first class, second point doesn't
  c(1,0)        #second point belongs to the first class, first point doesn't
)

X_learn <- list(
  c(1,2,3),
  c(-1,-2,-3)
)

mcgp$add_data(X_learn, y)
mcgp$get_prediction(c(1,2,4))

#Setting parameters

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-gp_classification-set_parameters"></a>}}
\if{latex}{\out{\hypertarget{method-gp_classification-set_parameters}{}}}
\subsection{Method \code{set_parameters()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{gp_classification$set_parameters(index, cov_name = NULL, parameter_list = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{index}}{number of the class label, whose covariance function should be
modified}

\item{\code{cov_name}}{character name of the covariance function that should be used.
See ?set_cov to get further informations about the possible functions}

\item{\code{parameter_list}}{named list of parameters, that should be used}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
See ?set_cov or ?set_parameter for further information about the possible
values of cov_name or parameter_list
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{mcgp <- gp_classification$new(n = 2)
y <- c(
  c(0,1),       #first point belongs to the first class, second point doesn't
  c(1,0)        #second point belongs to the first class, first point doesn't
)

X_learn <- list(
  c(1,2,3),
  c(-1,-2,-3)
)

mcgp$add_data(X_learn, y)
mcgp$set_parameters(1, "linear", list(sigma = c(1,1,1)))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-gp_classification-clone"></a>}}
\if{latex}{\out{\hypertarget{method-gp_classification-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{gp_classification$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
